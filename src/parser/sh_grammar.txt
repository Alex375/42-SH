input - DONE:            list '\n'
          list EOF
        | '\n'
        | EOF

list - DONE:        and_or (';' and_or)* [';']

and_or - DONE:        pipeline (('&&'|'||') ('\n')* pipeline)*

pipeline - DONE:    ['!'] command ('|' ('\n')* command)*

command - DONE:      simple_command
        | shell_command  (redirection)*
        | funcdec (redirection)*

simple_command:   (prefix)+
        | (prefix)* (element)+

shell_command - DONE:      '{' compound_list '}'
                | '(' compound_list ')'
                | rule_for
                | rule_while
                | rule_until
                | rule_case
                | rule_if

funcdec:    WORD '(' ')' ('\n')* shell_command

redirection - IN PROGRESS:    [IONUMBER] '>' WORD
        |   [IONUMBER] '<' WORD
        |   [IONUMBER] '>&' WORD
        |   [IONUMBER] '<&' WORD
        |   [IONUMBER] '>>' WORD
        |   [IONUMBER] '<>' WORD
        |   [IONUMBER] '>|' WORD

prefix:          ASSIGMENT_WORD
        | redirection

element:      WORD
        | redirection

compound_list - DONE:  ('\n')* and_or ((';'|'\n') ('\n')* and_or)* [(';'|'\n') ('\n')*]

rule_for - DONE:      For WORD ([';']|[('\n')* 'in' (WORD)* (';'|'\n')]) ('\n')* do_group

rule_while - DONE:    'while' compound_list do_group

rule_until - DONE:    'until' compound_list do_group

rule_case:    'case' WORD ('\n')* 'in' ('\n')* [case_clause] 'esac'

rule_if - DONE:      'if' compound_list 'then' compound_list [else_clause] 'fi'

else_clause - DONE:        'else' compound_list
        | 'elif' compound_list 'then' compound_list [else_clause]

do_group - DONE:    'do' compound_list 'done'

case_clause:     case_item (';;' ('\n')* case_item)* [;;] ('\n')*

case_item:    ['('] WORD ('|' WORD)* ')' ( ('\n')* | compound_list )